{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlanese/Projects/erc20-name-service/src/App.js\";\nimport './App.css';\nimport React, { PureComponent } from 'react';\nimport CryptoBanner from './banner';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: [],\n      tokensLoaded: false\n    };\n    this.apiEndpoint = 'web3api.io/api/v2/';\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0';\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d';\n  }\n\n  componentDidMount() {\n    this.fetchTokenList();\n  }\n\n  fetchTokenList() {\n    let responseData = null;\n    const xhrReq = new XMLHttpRequest();\n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        console.log(JSON.parse(this.responseText));\n      }\n    });\n    xhrReq.open('GET', \"https://\".concat(this.apiEndpoint).concat(this.tokenUrl));\n    xhrReq.setRequestHeader('x-api-key', this.apiKey);\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf');\n    xhrReq.send(responseData);\n  }\n\n  renderForm() {\n    const tokens = this.state.tokens;\n    return React.createElement(\"div\", {\n      className: 'form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43\n      },\n      __self: this\n    }, \"Grab your domain today:\"), React.createElement(\"div\", {\n      className: 'input',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 44\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: 'text',\n      className: 'domain-string',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }), React.createElement(\"select\", {\n      className: 'token-tld',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, tokens.map((token, i) => {\n      return React.createElement(\"option\", {\n        key: \"option-\".concat(i),\n        value: token,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49\n        },\n        __self: this\n      }, token);\n    }))));\n  }\n\n  render() {\n    const tokensLoaded = this.state.tokensLoaded;\n    return React.createElement(\"div\", {\n      className: 'App',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 64\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'header',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65\n      },\n      __self: this\n    }, React.createElement(CryptoBanner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }, \"ERC-20 Name Service Registrar\")), tokensLoaded ? this.renderForm() : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanlanese/Projects/erc20-name-service/src/App.js"],"names":["React","PureComponent","CryptoBanner","App","constructor","props","state","tokens","tokensLoaded","apiEndpoint","apiKey","tokenUrl","componentDidMount","fetchTokenList","responseData","xhrReq","XMLHttpRequest","addEventListener","readyState","DONE","console","log","JSON","parse","responseText","open","setRequestHeader","send","renderForm","map","token","i","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,YAAP,MAAyB,UAAzB;;AAEA,MAAMC,GAAN,SAAkBF,aAAlB,CAAgC;AAE9BG,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,YAAY,EAAE;AAFH,KAAb;AAIA,SAAKC,WAAL,GAAmB,oBAAnB;AACA,SAAKC,MAAL,GAAc,qCAAd;AACA,SAAKC,QAAL,GAAgB,wEAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAI;AAChB,QAAIC,YAAY,GAAG,IAAnB;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,EAAf;AAEAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,kBAAxB,EAA4C,YAAY;AACtD,UAAI,KAAKC,UAAL,KAAoB,KAAKC,IAA7B,EAAmC;AACjCC,QAAAA,OAAO,CAACC,GAAR,CAAYC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAZ;AACD;AACF,KAJD;AAMAT,IAAAA,MAAM,CAACU,IAAP,CAAY,KAAZ,oBAA8B,KAAKhB,WAAnC,SAAiD,KAAKE,QAAtD;AACAI,IAAAA,MAAM,CAACW,gBAAP,CAAwB,WAAxB,EAAqC,KAAKhB,MAA1C;AACAK,IAAAA,MAAM,CAACW,gBAAP,CAAwB,2BAAxB,EAAqD,kBAArD;AACAX,IAAAA,MAAM,CAACY,IAAP,CAAYb,YAAZ;AACD;;AAEDc,EAAAA,UAAU,GAAI;AAAA,UACJrB,MADI,GACO,KAAKD,KADZ,CACJC,MADI;AAGZ,WACE;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,IAAI,EAAE,MAAb;AAAqB,MAAA,SAAS,EAAE,eAAhC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAQ,MAAA,SAAS,EAAE,WAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGA,MAAM,CAACsB,GAAP,CAAW,CAACC,KAAD,EAAQC,CAAR,KAAc;AACxB,aACE;AAAQ,QAAA,GAAG,mBAAYA,CAAZ,CAAX;AAA4B,QAAA,KAAK,EAAED,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KADH,CADF;AAKD,KANA,CADH,CAFF,CAFF,CADF;AAiBD;;AAEDE,EAAAA,MAAM,GAAI;AAAA,UACAxB,YADA,GACiB,KAAKF,KADtB,CACAE,YADA;AAGR,WACE;AAAK,MAAA,SAAS,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFF,CADF,EAMIA,YAAY,GACV,KAAKoB,UAAL,EADU,GAEV,IARN,CADF;AAaD;;AAvE6B;;AA0EhC,eAAezB,GAAf","sourcesContent":["import './App.css'\nimport React, { PureComponent } from 'react'\nimport CryptoBanner from './banner'\n\nclass App extends PureComponent {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      tokens: [],\n      tokensLoaded: false\n    }\n    this.apiEndpoint = 'web3api.io/api/v2/'\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0'\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d'\n  }\n\n  componentDidMount () {\n    this.fetchTokenList()\n  }\n\n  fetchTokenList () {\n    let responseData = null\n    const xhrReq = new XMLHttpRequest()\n    \n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        console.log(JSON.parse(this.responseText))\n      }\n    })\n    \n    xhrReq.open('GET', `https://${this.apiEndpoint}${this.tokenUrl}`)\n    xhrReq.setRequestHeader('x-api-key', this.apiKey)\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf')\n    xhrReq.send(responseData)\n  }\n\n  renderForm () {\n    const { tokens } = this.state\n\n    return (\n      <div className={'form'}>\n        <span>Grab your domain today:</span>\n        <div className={'input'}>\n          <input type={'text'} className={'domain-string'} />\n          <select className={'token-tld'}>\n            {tokens.map((token, i) => {\n              return (\n                <option key={`option-${i}`} value={token}>\n                  {token}\n                </option>\n              )\n            })}\n          </select>\n        </div>\n      </div>\n    )\n  }\n\n  render () {\n    const { tokensLoaded } = this.state\n\n    return (\n      <div className={'App'}>\n        <div className={'header'}>\n          <CryptoBanner />\n          <h1>ERC-20 Name Service Registrar</h1>\n        </div>\n        {\n          tokensLoaded\n          ? this.renderForm()\n          : null\n        }\n      </div>\n    )   \n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}