{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlanese/Projects/erc20-name-service/src/App.js\";\nimport './App.css';\nimport React, { PureComponent } from 'react';\nimport CryptoBanner from './banner';\nimport { abi } from './abi';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: '',\n      existingRegistry: '',\n      validationError: false,\n      providerEnabled: false,\n      accounts: [],\n      contract: null,\n      currentAccount: null,\n      contractInstance: null,\n      confirmingTx: false\n    };\n    this.apiEndpoint = 'web3api.io/api/v2/';\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0';\n    this.contractAddress = '0x67CC728484Af8A2dfAed2f3e2Cc557e01692C4bF';\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d';\n  }\n\n  async componentDidMount() {\n    this.fetchTokenList();\n    const contract = window.web3.eth.contract(abi);\n    const contractInstance = contract.at(this.contractAddress);\n\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable();\n        this.setState({\n          contract,\n          contractInstance,\n          providerEnabled: true\n        });\n      } catch (error) {}\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const _this = this;\n\n    if (this.state.providerEnabled && !prevState.providerEnabled) {\n      window.web3.eth.getAccounts(function (err, res) {\n        if (!err) {\n          _this.setState({\n            currentAccount: res[0]\n          });\n        }\n      });\n    }\n  }\n\n  fetchTokenList() {\n    let responseData = null;\n\n    const _this = this;\n\n    const xhrReq = new XMLHttpRequest();\n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText);\n\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data);\n        }\n      }\n    });\n    xhrReq.open('GET', \"https://\".concat(this.apiEndpoint).concat(this.tokenUrl));\n    xhrReq.setRequestHeader('x-api-key', this.apiKey);\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf');\n    xhrReq.send(responseData);\n  }\n\n  fillTokens(responseList) {\n    const erc20TokenLabels = responseList.filter(item => item.isERC20).map(item => item.symbol.toLowerCase());\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    });\n  }\n\n  onDomainChange(event) {\n    const _this = this;\n\n    const domainName = event.target.value;\n    const validationError = !domainName.match(/^[\\x2D0-9A-Z_a-z]+$/);\n    const _this$state = this.state,\n          contractInstance = _this$state.contractInstance,\n          domainTld = _this$state.domainTld;\n    this.setState({\n      domainName,\n      validationError,\n      existingRegistry: ''\n    });\n\n    if (!validationError) {\n      contractInstance.lookup(\"\".concat(domainName, \".\").concat(domainTld), function (err, result) {\n        console.log({\n          err,\n          result\n        }); // This is hacky and in rare scenarios not reliable, but this is a hackathon\n\n        if (!result.startsWith('0x000000000')) {\n          _this.setState({\n            existingRegistry: result\n          });\n        }\n      });\n    }\n  }\n\n  onTldChange(event) {\n    this.setState({\n      domainTld: event.target.value\n    });\n  }\n\n  onSubmit() {\n    const _this = this;\n\n    const _this$state2 = this.state,\n          contractInstance = _this$state2.contractInstance,\n          currentAccount = _this$state2.currentAccount,\n          domainName = _this$state2.domainName,\n          domainTld = _this$state2.domainTld;\n\n    if (!contractInstance) {\n      console.error('Error: Could not create contract instance');\n    }\n\n    const transaction = {\n      from: currentAccount,\n      gas: 200000\n    };\n    contractInstance.register.sendTransaction(\"\".concat(domainName, \".\").concat(domainTld), transaction, function (err, response) {\n      if (!err) {\n        _this.setState({\n          confirmingTx: true\n        });\n\n        const intervalId = setInterval(() => {\n          window.web3.eth.getTransactionReceipt(response, function (err, data) {\n            if (data) {\n              clearInterval(intervalId);\n              alert(\"Congratulations! Your domain \".concat(domainName, \".\").concat(domainTld, \" has been registered to you!\"));\n\n              _this.setState({\n                confirmingTx: false,\n                domainName: ''\n              });\n            }\n          });\n        }, 100);\n      }\n    });\n  }\n\n  renderForm() {\n    const _this$state3 = this.state,\n          domainName = _this$state3.domainName,\n          domainTld = _this$state3.domainTld,\n          tokens = _this$state3.tokens,\n          validationError = _this$state3.validationError,\n          confirmingTx = _this$state3.confirmingTx,\n          existingRegistry = _this$state3.existingRegistry;\n    const domainString = \"\".concat(domainName, \".\").concat(domainTld);\n    return React.createElement(\"div\", {\n      className: 'form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }, \"Your domain, your tokens. Grab yours today:\"), React.createElement(\"div\", {\n      className: 'input',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: 'text',\n      value: domainName,\n      onChange: this.onDomainChange.bind(this),\n      className: \"domain-string form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'period',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 172\n      },\n      __self: this\n    }, \".\")), React.createElement(\"select\", {\n      className: 'token-tld',\n      onChange: this.onTldChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 174\n      },\n      __self: this\n    }, tokens.map((token, i) => {\n      return React.createElement(\"option\", {\n        key: \"option-\".concat(i),\n        value: token,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, token);\n    })), React.createElement(\"button\", {\n      onClick: this.onSubmit.bind(this),\n      className: 'btn btn-dark',\n      disabled: validationError || !domainName.length || existingRegistry.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 183\n      },\n      __self: this\n    }, \"Submit\")), domainName.length && !confirmingTx && !existingRegistry.length ? React.createElement(React.Fragment, null, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }, \"Preview:\"), React.createElement(\"div\", {\n      className: 'preview',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: 'preview-text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"http://\".concat(domainString)), validationError ? React.createElement(\"div\", {\n      className: 'error-text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 199\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }, \"Your domain name may only contain alpha-numeric characters, hyphens, and underscores.\")) : null) : null, confirmingTx ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    }, \"Confirming registration...\") : null, existingRegistry.length ? React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 214\n      },\n      __self: this\n    }, domainString, \" is already registered and points to: $\", existingRegistry) : null);\n  }\n\n  render() {\n    const _this$state4 = this.state,\n          currentAccount = _this$state4.currentAccount,\n          tokensLoaded = _this$state4.tokensLoaded;\n    return React.createElement(\"div\", {\n      className: 'App',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 225\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'header',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 226\n      },\n      __self: this\n    }, React.createElement(CryptoBanner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 227\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    }, \"ERC-20 Name Service Registrar\")), tokensLoaded && currentAccount ? this.renderForm() : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanlanese/Projects/erc20-name-service/src/App.js"],"names":["React","PureComponent","CryptoBanner","abi","App","constructor","props","state","tokens","tokensLoaded","domainName","domainTld","existingRegistry","validationError","providerEnabled","accounts","contract","currentAccount","contractInstance","confirmingTx","apiEndpoint","apiKey","contractAddress","tokenUrl","componentDidMount","fetchTokenList","window","web3","eth","at","ethereum","enable","setState","error","componentDidUpdate","prevProps","prevState","_this","getAccounts","err","res","responseData","xhrReq","XMLHttpRequest","addEventListener","readyState","DONE","dataObj","JSON","parse","responseText","status","fillTokens","payload","data","open","setRequestHeader","send","responseList","erc20TokenLabels","filter","item","isERC20","map","symbol","toLowerCase","onDomainChange","event","target","value","match","lookup","result","console","log","startsWith","onTldChange","onSubmit","transaction","from","gas","register","sendTransaction","response","intervalId","setInterval","getTransactionReceipt","clearInterval","alert","renderForm","domainString","bind","token","i","length","render"],"mappings":"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","sourcesContent":["import './App.css'\nimport React, { PureComponent } from 'react'\nimport CryptoBanner from './banner'\nimport { abi } from './abi'\n\nclass App extends PureComponent {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: '',\n      existingRegistry: '',\n      validationError: false,\n      providerEnabled: false,\n      accounts: [],\n      contract: null,\n      currentAccount: null,\n      contractInstance: null,\n      confirmingTx: false\n    }\n    this.apiEndpoint = 'web3api.io/api/v2/'\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0'\n    this.contractAddress = '0x67CC728484Af8A2dfAed2f3e2Cc557e01692C4bF'\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d'\n  }\n\n  async componentDidMount () {\n    this.fetchTokenList()\n    const contract = window.web3.eth.contract(abi)\n    const contractInstance = contract.at(this.contractAddress)\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable()\n        this.setState({\n          contract,\n          contractInstance,\n          providerEnabled: true\n        })\n      } catch (error) {}\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const _this = this\n    if (this.state.providerEnabled && !prevState.providerEnabled) {\n      window.web3.eth.getAccounts(function (err, res) {\n        if (!err) {\n          _this.setState({ currentAccount: res[0] })\n        }\n      })\n    }\n  } \n\n  fetchTokenList () {\n    let responseData = null\n    const _this = this\n    const xhrReq = new XMLHttpRequest()\n    \n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText)\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data)\n        }\n      }\n    })\n    \n    xhrReq.open('GET', `https://${this.apiEndpoint}${this.tokenUrl}`)\n    xhrReq.setRequestHeader('x-api-key', this.apiKey)\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf')\n    xhrReq.send(responseData)\n  }\n\n  fillTokens (responseList) {\n    const erc20TokenLabels = responseList\n      .filter((item) => item.isERC20)\n      .map((item) => item.symbol.toLowerCase())\n\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    })\n  }\n\n  onDomainChange (event) {\n    const _this = this\n    const domainName = event.target.value\n    const validationError = !(domainName.match(/^[A-Za-z0-9\\-\\_]+$/s))\n    const { contractInstance, domainTld } = this.state\n\n    this.setState({\n      domainName,\n      validationError,\n      existingRegistry: ''\n    })\n\n    if (!validationError) {\n      contractInstance.lookup(`${domainName}.${domainTld}`, function (err, result) {\n        console.log({err, result})\n        // This is hacky and in rare scenarios not reliable, but this is a hackathon\n        if (!result.startsWith('0x000000000')) {\n          _this.setState({ existingRegistry: result })\n        }\n      })\n    }\n  }\n\n  onTldChange (event) {\n    this.setState({\n      domainTld: event.target.value\n    })\n  }\n\n  onSubmit () {\n    const _this = this\n    const { contractInstance, currentAccount, domainName, domainTld } = this.state\n\n    if (!contractInstance) {\n      console.error('Error: Could not create contract instance')\n    }\n\n    const transaction = {\n      from: currentAccount,\n      gas: 200000,\n    }\n\n    contractInstance.register.sendTransaction(`${domainName}.${domainTld}`, transaction, function (err, response) {\n      if (!err) {\n        _this.setState({ confirmingTx: true })\n        const intervalId = setInterval(() => {\n          window.web3.eth.getTransactionReceipt(response, function (err, data) {\n            if (data) {\n              clearInterval(intervalId)\n              alert(`Congratulations! Your domain ${domainName}.${domainTld} has been registered to you!`)\n              _this.setState({\n                confirmingTx: false,\n                domainName: ''\n              })\n            }\n          })\n        }, 100)\n      }\n    })\n  }                  \n\n  renderForm () {\n    const {\n      domainName,\n      domainTld,\n      tokens,\n      validationError,\n      confirmingTx,\n      existingRegistry\n    } = this.state\n    const domainString = `${domainName}.${domainTld}`\n\n    return (\n      <div className={'form'}>\n        <span>Your domain, your tokens. Grab yours today:</span>\n        <div className={'input'}>\n          <input\n            type={'text'}\n            value={domainName}\n            onChange={this.onDomainChange.bind(this)}\n            className={`domain-string form-control`}\n          />\n          <div className={'period'}>\n            <span>.</span>\n          </div>\n          <select className={'token-tld'} onChange={this.onTldChange.bind(this)}>\n            {tokens.map((token, i) => {\n              return (\n                <option key={`option-${i}`} value={token}>\n                  {token}\n                </option>\n              )\n            })}\n          </select>\n          <button\n            onClick={this.onSubmit.bind(this)}\n            className={'btn btn-dark'}\n            disabled={validationError || !domainName.length || existingRegistry.length}\n          >\n            Submit\n          </button>\n        </div>\n        {\n          domainName.length && !confirmingTx && !existingRegistry.length\n          ? <>\n              <h4>Preview:</h4>\n              <div className={'preview'}></div>\n              <span className={'preview-text'}>{`http://${domainString}`}</span>\n              {\n                validationError\n                ? <div className={'error-text'}>\n                    <span>Your domain name may only contain alpha-numeric characters, hyphens, and underscores.</span>\n                  </div>\n                : null\n              }\n            </>\n          : null\n        }\n        {\n          confirmingTx\n          ? <h4>Confirming registration...</h4>\n          : null\n        }\n        {\n          existingRegistry.length\n          ? <h4>{domainString} is already registered and points to: ${existingRegistry}</h4>\n          : null\n        }\n      </div>\n    )\n  }\n\n  render () {\n    const { currentAccount, tokensLoaded } = this.state\n\n    return (\n      <div className={'App'}>\n        <div className={'header'}>\n          <CryptoBanner />\n          <h1>ERC-20 Name Service Registrar</h1>\n        </div>\n        {\n          tokensLoaded && currentAccount\n          ? this.renderForm()\n          : null\n        }\n      </div>\n    )   \n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}