{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlanese/Projects/erc20-name-service/src/App.js\";\nimport './App.css';\nimport React, { PureComponent } from 'react';\nimport CryptoBanner from './banner';\nimport { abi } from './abi';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: '',\n      validationError: false,\n      providerEnabled: false,\n      accounts: [],\n      currentAccount: null\n    };\n    this.contract = null;\n    this.contractInstance = null;\n    this.apiEndpoint = 'web3api.io/api/v2/';\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0';\n    this.contractAddress = '0x67CC728484Af8A2dfAed2f3e2Cc557e01692C4bF';\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d';\n  }\n\n  async componentDidMount() {\n    this.fetchTokenList();\n    this.contract = window.web3.eth.contract(abi);\n    this.contractInstance = this.contract.at(this.contractAddress);\n\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable();\n        this.setState({\n          providerEnabled: true\n        });\n      } catch (error) {}\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const _this = this;\n\n    if (this.state.providerEnabled && !prevState.providerEnabled) {\n      window.web3.eth.getAccounts(function (err, res) {\n        if (!err) {\n          _this.setState({\n            currentAccount: res[0]\n          });\n        }\n      });\n    }\n  }\n\n  fetchTokenList() {\n    let responseData = null;\n\n    const _this = this;\n\n    const xhrReq = new XMLHttpRequest();\n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText);\n\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data);\n        }\n      }\n    });\n    xhrReq.open('GET', \"https://\".concat(this.apiEndpoint).concat(this.tokenUrl));\n    xhrReq.setRequestHeader('x-api-key', this.apiKey);\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf');\n    xhrReq.send(responseData);\n  }\n\n  fillTokens(responseList) {\n    const erc20TokenLabels = responseList.filter(item => item.isERC20).map(item => item.symbol.toLowerCase());\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    });\n  }\n\n  onDomainChange(event) {\n    const domainName = event.target.value;\n    const validationError = !domainName.match(/^[\\x2D0-9A-Z_a-z]+$/);\n    this.setState({\n      domainName,\n      validationError\n    });\n  }\n\n  onTldChange(event) {\n    this.setState({\n      domainTld: event.target.value\n    });\n  }\n\n  onSubmit() {\n    console.log('Submitting');\n  }\n\n  renderForm() {\n    const _this$state = this.state,\n          currentAccount = _this$state.currentAccount,\n          domainName = _this$state.domainName,\n          domainTld = _this$state.domainTld,\n          tokens = _this$state.tokens,\n          validationError = _this$state.validationError;\n    return React.createElement(\"div\", {\n      className: 'form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }, \"Your domain, your tokens. Grab yours today for your address (\", currentAccount, \"):\"), React.createElement(\"div\", {\n      className: 'input',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      type: 'text',\n      onChange: this.onDomainChange.bind(this),\n      className: \"domain-string form-control\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'period',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, \".\")), React.createElement(\"select\", {\n      className: 'token-tld',\n      onChange: this.onTldChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 124\n      },\n      __self: this\n    }, tokens.map((token, i) => {\n      return React.createElement(\"option\", {\n        key: \"option-\".concat(i),\n        value: token,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, token);\n    })), React.createElement(\"button\", {\n      onClick: this.onSubmit,\n      className: 'btn btn-dark',\n      disabled: validationError || !domainName.length,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Submit\")), domainName.length ? React.createElement(React.Fragment, null, React.createElement(\"h4\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    }, \"Preview:\"), React.createElement(\"div\", {\n      className: 'preview',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 145\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: 'preview-text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, \"http://\".concat(domainName, \".\").concat(domainTld)), validationError ? React.createElement(\"div\", {\n      className: 'error-text',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, \"Your domain name may only contain alpha-numeric characters, hyphens, and underscores.\")) : null) : null);\n  }\n\n  render() {\n    const _this$state2 = this.state,\n          currentAccount = _this$state2.currentAccount,\n          tokensLoaded = _this$state2.tokensLoaded;\n    return React.createElement(\"div\", {\n      className: 'App',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 165\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'header',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 166\n      },\n      __self: this\n    }, React.createElement(CryptoBanner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 167\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    }, \"ERC-20 Name Service Registrar\")), tokensLoaded && currentAccount ? this.renderForm() : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanlanese/Projects/erc20-name-service/src/App.js"],"names":["React","PureComponent","CryptoBanner","abi","App","constructor","props","state","tokens","tokensLoaded","domainName","domainTld","validationError","providerEnabled","accounts","currentAccount","contract","contractInstance","apiEndpoint","apiKey","contractAddress","tokenUrl","componentDidMount","fetchTokenList","window","web3","eth","at","ethereum","enable","setState","error","componentDidUpdate","prevProps","prevState","_this","getAccounts","err","res","responseData","xhrReq","XMLHttpRequest","addEventListener","readyState","DONE","dataObj","JSON","parse","responseText","status","fillTokens","payload","data","open","setRequestHeader","send","responseList","erc20TokenLabels","filter","item","isERC20","map","symbol","toLowerCase","onDomainChange","event","target","value","match","onTldChange","onSubmit","console","log","renderForm","bind","token","i","length","render"],"mappings":"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","sourcesContent":["import './App.css'\nimport React, { PureComponent } from 'react'\nimport CryptoBanner from './banner'\nimport { abi } from './abi'\n\nclass App extends PureComponent {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: '',\n      validationError: false,\n      providerEnabled: false,\n      accounts: [],\n      currentAccount: null\n    }\n    this.contract = null\n    this.contractInstance = null\n    this.apiEndpoint = 'web3api.io/api/v2/'\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0'\n    this.contractAddress = '0x67CC728484Af8A2dfAed2f3e2Cc557e01692C4bF'\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d'\n  }\n\n  async componentDidMount () {\n    this.fetchTokenList()\n    this.contract = window.web3.eth.contract(abi)\n    this.contractInstance = this.contract.at(this.contractAddress)\n    if (window.ethereum) {\n      try {\n        await window.ethereum.enable()\n        this.setState({ providerEnabled: true })\n      } catch (error) {}\n    }\n  }\n\n  componentDidUpdate (prevProps, prevState) {\n    const _this = this\n    if (this.state.providerEnabled && !prevState.providerEnabled) {\n      window.web3.eth.getAccounts(function (err, res) {\n        if (!err) {\n          _this.setState({ currentAccount: res[0] })\n        }\n      })\n    }\n  } \n\n  fetchTokenList () {\n    let responseData = null\n    const _this = this\n    const xhrReq = new XMLHttpRequest()\n    \n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText)\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data)\n        }\n      }\n    })\n    \n    xhrReq.open('GET', `https://${this.apiEndpoint}${this.tokenUrl}`)\n    xhrReq.setRequestHeader('x-api-key', this.apiKey)\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf')\n    xhrReq.send(responseData)\n  }\n\n  fillTokens (responseList) {\n    const erc20TokenLabels = responseList\n      .filter((item) => item.isERC20)\n      .map((item) => item.symbol.toLowerCase())\n\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    })\n  }\n\n  onDomainChange (event) {\n    const domainName = event.target.value\n    const validationError = !(domainName.match(/^[A-Za-z0-9\\-\\_]+$/s))\n\n    this.setState({\n      domainName,\n      validationError\n    })\n  }\n\n  onTldChange (event) {\n    this.setState({\n      domainTld: event.target.value\n    })\n  }\n\n  onSubmit () {\n    console.log('Submitting')\n  }\n\n  renderForm () {\n    const {\n      currentAccount,\n      domainName,\n      domainTld,\n      tokens,\n      validationError\n    } = this.state\n\n    return (\n      <div className={'form'}>\n        <span>Your domain, your tokens. Grab yours today for your address ({currentAccount}):</span>\n        <div className={'input'}>\n          <input\n            type={'text'}\n            onChange={this.onDomainChange.bind(this)}\n            className={`domain-string form-control`}\n          />\n          <div className={'period'}>\n            <span>.</span>\n          </div>\n          <select className={'token-tld'} onChange={this.onTldChange.bind(this)}>\n            {tokens.map((token, i) => {\n              return (\n                <option key={`option-${i}`} value={token}>\n                  {token}\n                </option>\n              )\n            })}\n          </select>\n          <button\n            onClick={this.onSubmit}\n            className={'btn btn-dark'}\n            disabled={validationError || !domainName.length}\n          >\n            Submit\n          </button>\n        </div>\n        {\n          domainName.length\n          ? <>\n              <h4>Preview:</h4>\n              <div className={'preview'}></div>\n              <span className={'preview-text'}>{`http://${domainName}.${domainTld}`}</span>\n              {\n                validationError\n                ? <div className={'error-text'}>\n                    <span>Your domain name may only contain alpha-numeric characters, hyphens, and underscores.</span>\n                  </div>\n                : null\n              }\n            </>\n          : null\n        }\n      </div>\n    )\n  }\n\n  render () {\n    const { currentAccount, tokensLoaded } = this.state\n\n    return (\n      <div className={'App'}>\n        <div className={'header'}>\n          <CryptoBanner />\n          <h1>ERC-20 Name Service Registrar</h1>\n        </div>\n        {\n          tokensLoaded && currentAccount\n          ? this.renderForm()\n          : null\n        }\n      </div>\n    )   \n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}