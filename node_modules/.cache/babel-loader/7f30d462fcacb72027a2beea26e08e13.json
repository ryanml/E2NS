{"ast":null,"code":"var _jsxFileName = \"/Users/ryanlanese/Projects/erc20-name-service/src/App.js\";\nimport './App.css';\nimport React, { PureComponent } from 'react';\nimport CryptoBanner from './banner';\n\nclass App extends PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: ''\n    };\n    this.apiEndpoint = 'web3api.io/api/v2/';\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0';\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d';\n  }\n\n  componentDidMount() {\n    this.fetchTokenList();\n  }\n\n  fetchTokenList() {\n    let responseData = null;\n\n    const _this = this;\n\n    const xhrReq = new XMLHttpRequest();\n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText);\n\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data);\n        }\n      }\n    });\n    xhrReq.open('GET', \"https://\".concat(this.apiEndpoint).concat(this.tokenUrl));\n    xhrReq.setRequestHeader('x-api-key', this.apiKey);\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf');\n    xhrReq.send(responseData);\n  }\n\n  fillTokens(responseList) {\n    const erc20TokenLabels = responseList.filter(item => item.isERC20).map(item => item.symbol.toLowerCase());\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    });\n  }\n\n  onDomainChange(event) {\n    this.setState({\n      domainName: event.target.value\n    });\n  }\n\n  onTldChange(event) {\n    this.setState({\n      domainTld: event.target.value\n    });\n  }\n\n  renderForm() {\n    const tokens = this.state.tokens;\n\n    if (this.state.domainName.length) {\n      console.log(\"\".concat(this.state.domainName, \".\").concat(this.state.domainTld));\n    }\n\n    return React.createElement(\"div\", {\n      className: 'form',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Grab your domain today:\"), React.createElement(\"div\", {\n      className: 'input',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      onChange: this.onDomainChange.bind(this),\n      type: 'text',\n      className: 'domain-string',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: 'period',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, \".\")), React.createElement(\"select\", {\n      className: 'token-tld',\n      onChange: this.onTldChange.bind(this),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 83\n      },\n      __self: this\n    }, tokens.map((token, i) => {\n      return React.createElement(\"option\", {\n        key: \"option-\".concat(i),\n        value: token,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      }, token);\n    }))));\n  }\n\n  render() {\n    const tokensLoaded = this.state.tokensLoaded;\n    return React.createElement(\"div\", {\n      className: 'App',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 101\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: 'header',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    }, React.createElement(CryptoBanner, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103\n      },\n      __self: this\n    }), React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104\n      },\n      __self: this\n    }, \"ERC-20 Name Service Registrar\")), tokensLoaded ? this.renderForm() : null);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/ryanlanese/Projects/erc20-name-service/src/App.js"],"names":["React","PureComponent","CryptoBanner","App","constructor","props","state","tokens","tokensLoaded","domainName","domainTld","apiEndpoint","apiKey","tokenUrl","componentDidMount","fetchTokenList","responseData","_this","xhrReq","XMLHttpRequest","addEventListener","readyState","DONE","dataObj","JSON","parse","responseText","status","fillTokens","payload","data","open","setRequestHeader","send","responseList","erc20TokenLabels","filter","item","isERC20","map","symbol","toLowerCase","setState","onDomainChange","event","target","value","onTldChange","renderForm","length","console","log","bind","token","i","render"],"mappings":";AAAA,OAAO,WAAP;AACA,OAAOA,KAAP,IAAgBC,aAAhB,QAAqC,OAArC;AACA,OAAOC,YAAP,MAAyB,UAAzB;;AAEA,MAAMC,GAAN,SAAkBF,aAAlB,CAAgC;AAE9BG,EAAAA,WAAW,CAAEC,KAAF,EAAS;AAClB,UAAMA,KAAN;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,MAAM,EAAE,EADG;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,UAAU,EAAE,EAHD;AAIXC,MAAAA,SAAS,EAAE;AAJA,KAAb;AAMA,SAAKC,WAAL,GAAmB,oBAAnB;AACA,SAAKC,MAAL,GAAc,qCAAd;AACA,SAAKC,QAAL,GAAgB,wEAAhB;AACD;;AAEDC,EAAAA,iBAAiB,GAAI;AACnB,SAAKC,cAAL;AACD;;AAEDA,EAAAA,cAAc,GAAI;AAChB,QAAIC,YAAY,GAAG,IAAnB;;AACA,UAAMC,KAAK,GAAG,IAAd;;AACA,UAAMC,MAAM,GAAG,IAAIC,cAAJ,EAAf;AAEAD,IAAAA,MAAM,CAACE,gBAAP,CAAwB,kBAAxB,EAA4C,YAAY;AACtD,UAAI,KAAKC,UAAL,KAAoB,KAAKC,IAA7B,EAAmC;AACjC,cAAMC,OAAO,GAAGC,IAAI,CAACC,KAAL,CAAW,KAAKC,YAAhB,CAAhB;;AACA,YAAIH,OAAO,CAACI,MAAR,KAAmB,GAAvB,EAA4B;AAC1BV,UAAAA,KAAK,CAACW,UAAN,CAAiBL,OAAO,CAACM,OAAR,CAAgBC,IAAjC;AACD;AACF;AACF,KAPD;AASAZ,IAAAA,MAAM,CAACa,IAAP,CAAY,KAAZ,oBAA8B,KAAKpB,WAAnC,SAAiD,KAAKE,QAAtD;AACAK,IAAAA,MAAM,CAACc,gBAAP,CAAwB,WAAxB,EAAqC,KAAKpB,MAA1C;AACAM,IAAAA,MAAM,CAACc,gBAAP,CAAwB,2BAAxB,EAAqD,kBAArD;AACAd,IAAAA,MAAM,CAACe,IAAP,CAAYjB,YAAZ;AACD;;AAEDY,EAAAA,UAAU,CAAEM,YAAF,EAAgB;AACxB,UAAMC,gBAAgB,GAAGD,YAAY,CAClCE,MADsB,CACdC,IAAD,IAAUA,IAAI,CAACC,OADA,EAEtBC,GAFsB,CAEjBF,IAAD,IAAUA,IAAI,CAACG,MAAL,CAAYC,WAAZ,EAFQ,CAAzB;AAIA,SAAKC,QAAL,CAAc;AACZlC,MAAAA,YAAY,EAAE,IADF;AAEZD,MAAAA,MAAM,EAAE4B,gBAFI;AAGZzB,MAAAA,SAAS,EAAEyB,gBAAgB,CAAC,CAAD;AAHf,KAAd;AAKD;;AAEDQ,EAAAA,cAAc,CAAEC,KAAF,EAAS;AACrB,SAAKF,QAAL,CAAc;AACZjC,MAAAA,UAAU,EAAEmC,KAAK,CAACC,MAAN,CAAaC;AADb,KAAd;AAGD;;AAEDC,EAAAA,WAAW,CAAEH,KAAF,EAAS;AAClB,SAAKF,QAAL,CAAc;AACZhC,MAAAA,SAAS,EAAEkC,KAAK,CAACC,MAAN,CAAaC;AADZ,KAAd;AAGD;;AAEDE,EAAAA,UAAU,GAAI;AAAA,UACJzC,MADI,GACO,KAAKD,KADZ,CACJC,MADI;;AAGZ,QAAI,KAAKD,KAAL,CAAWG,UAAX,CAAsBwC,MAA1B,EAAkC;AAChCC,MAAAA,OAAO,CAACC,GAAR,WAAe,KAAK7C,KAAL,CAAWG,UAA1B,cAAwC,KAAKH,KAAL,CAAWI,SAAnD;AACD;;AAED,WACE;AAAK,MAAA,SAAS,EAAE,MAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAEE;AAAK,MAAA,SAAS,EAAE,OAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAO,MAAA,QAAQ,EAAE,KAAKiC,cAAL,CAAoBS,IAApB,CAAyB,IAAzB,CAAjB;AAAiD,MAAA,IAAI,EAAE,MAAvD;AAA+D,MAAA,SAAS,EAAE,eAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAK,MAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,CAFF,EAKE;AAAQ,MAAA,SAAS,EAAE,WAAnB;AAAgC,MAAA,QAAQ,EAAE,KAAKL,WAAL,CAAiBK,IAAjB,CAAsB,IAAtB,CAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACG7C,MAAM,CAACgC,GAAP,CAAW,CAACc,KAAD,EAAQC,CAAR,KAAc;AACxB,aACE;AAAQ,QAAA,GAAG,mBAAYA,CAAZ,CAAX;AAA4B,QAAA,KAAK,EAAED,KAAnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACGA,KADH,CADF;AAKD,KANA,CADH,CALF,CAFF,CADF;AAoBD;;AAEDE,EAAAA,MAAM,GAAI;AAAA,UACA/C,YADA,GACiB,KAAKF,KADtB,CACAE,YADA;AAGR,WACE;AAAK,MAAA,SAAS,EAAE,KAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAK,MAAA,SAAS,EAAE,QAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,oBAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uCAFF,CADF,EAMIA,YAAY,GACV,KAAKwC,UAAL,EADU,GAEV,IARN,CADF;AAaD;;AA5G6B;;AA+GhC,eAAe7C,GAAf","sourcesContent":["import './App.css'\nimport React, { PureComponent } from 'react'\nimport CryptoBanner from './banner'\n\nclass App extends PureComponent {\n\n  constructor (props) {\n    super(props)\n    this.state = {\n      tokens: [],\n      tokensLoaded: false,\n      domainName: '',\n      domainTld: ''\n    }\n    this.apiEndpoint = 'web3api.io/api/v2/'\n    this.apiKey = 'UAK7acefdf714da8dd18a117280de7452f0'\n    this.tokenUrl = 'tokens/rankings?direction=descending&sortType=marketCap&timeInterval=d'\n  }\n\n  componentDidMount () {\n    this.fetchTokenList()\n  }\n\n  fetchTokenList () {\n    let responseData = null\n    const _this = this\n    const xhrReq = new XMLHttpRequest()\n    \n    xhrReq.addEventListener('readystatechange', function () {\n      if (this.readyState === this.DONE) {\n        const dataObj = JSON.parse(this.responseText)\n        if (dataObj.status === 200) {\n          _this.fillTokens(dataObj.payload.data)\n        }\n      }\n    })\n    \n    xhrReq.open('GET', `https://${this.apiEndpoint}${this.tokenUrl}`)\n    xhrReq.setRequestHeader('x-api-key', this.apiKey)\n    xhrReq.setRequestHeader('x-amberdata-blockchain-id', '1c9c969065fcd1cf')\n    xhrReq.send(responseData)\n  }\n\n  fillTokens (responseList) {\n    const erc20TokenLabels = responseList\n      .filter((item) => item.isERC20)\n      .map((item) => item.symbol.toLowerCase())\n\n    this.setState({\n      tokensLoaded: true,\n      tokens: erc20TokenLabels,\n      domainTld: erc20TokenLabels[0]\n    })\n  }\n\n  onDomainChange (event) {\n    this.setState({\n      domainName: event.target.value\n    })\n  }\n\n  onTldChange (event) {\n    this.setState({\n      domainTld: event.target.value\n    })\n  } \n\n  renderForm () {\n    const { tokens } = this.state\n\n    if (this.state.domainName.length) {\n      console.log(`${this.state.domainName}.${this.state.domainTld}`)\n    }\n\n    return (\n      <div className={'form'}>\n        <span>Grab your domain today:</span>\n        <div className={'input'}>\n          <input onChange={this.onDomainChange.bind(this)} type={'text'} className={'domain-string'} />\n          <div className={'period'}>\n            <span>.</span>\n          </div>\n          <select className={'token-tld'} onChange={this.onTldChange.bind(this)}>\n            {tokens.map((token, i) => {\n              return (\n                <option key={`option-${i}`} value={token}>\n                  {token}\n                </option>\n              )\n            })}\n          </select>\n        </div>\n      </div>\n    )\n  }\n\n  render () {\n    const { tokensLoaded } = this.state\n\n    return (\n      <div className={'App'}>\n        <div className={'header'}>\n          <CryptoBanner />\n          <h1>ERC-20 Name Service Registrar</h1>\n        </div>\n        {\n          tokensLoaded\n          ? this.renderForm()\n          : null\n        }\n      </div>\n    )   \n  }\n}\n\nexport default App\n"]},"metadata":{},"sourceType":"module"}